/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"context"
	"crypto/tls"
	"flag"
	"os"

	routev1 "github.com/openshift/api/route/v1"

	"k8s.io/klog/v2/textlogger"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/healthz"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
	"sigs.k8s.io/controller-runtime/pkg/metrics/filters"
	metricsserver "sigs.k8s.io/controller-runtime/pkg/metrics/server"
	"sigs.k8s.io/controller-runtime/pkg/webhook"

	"k8s.io/apimachinery/pkg/runtime"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"

	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	_ "k8s.io/client-go/plugin/pkg/client/auth"

	operatoropenshiftiov1alpha1 "github.com/openshift/zero-trust-workload-identity-manager/api/v1alpha1"
	customClient "github.com/openshift/zero-trust-workload-identity-manager/pkg/client"
	spiffeCsiDriverController "github.com/openshift/zero-trust-workload-identity-manager/pkg/controller/spiffe-csi-driver"
	spireAgentController "github.com/openshift/zero-trust-workload-identity-manager/pkg/controller/spire-agent"
	spireOIDCDiscoveryProviderController "github.com/openshift/zero-trust-workload-identity-manager/pkg/controller/spire-oidc-discovery-provider"
	spireServerController "github.com/openshift/zero-trust-workload-identity-manager/pkg/controller/spire-server"
	staticResourceController "github.com/openshift/zero-trust-workload-identity-manager/pkg/controller/static-resource-controller"
	"github.com/openshift/zero-trust-workload-identity-manager/pkg/operator/bootstrap"

	securityv1 "github.com/openshift/api/security/v1"

	ctrlmgr "github.com/spiffe/spire-controller-manager/api/v1alpha1"
	// +kubebuilder:scaffold:imports
)

var (
	scheme   = runtime.NewScheme()
	setupLog = ctrl.Log.WithName("setup")
)

func init() {
	utilruntime.Must(clientgoscheme.AddToScheme(scheme))

	utilruntime.Must(operatoropenshiftiov1alpha1.AddToScheme(scheme))
	// +kubebuilder:scaffold:scheme
}

func main() {
	var metricsAddr string
	var enableLeaderElection bool
	var probeAddr string
	var secureMetrics bool
	var enableHTTP2 bool
	var logLevel int
	var tlsOpts []func(*tls.Config)
	flag.StringVar(&metricsAddr, "metrics-bind-address", "0", "The address the metrics endpoint binds to. "+
		"Use :8443 for HTTPS or :8080 for HTTP, or leave as 0 to disable the metrics service.")
	flag.StringVar(&probeAddr, "health-probe-bind-address", ":8081", "The address the probe endpoint binds to.")
	flag.BoolVar(&enableLeaderElection, "leader-elect", false,
		"Enable leader election for controller manager. "+
			"Enabling this will ensure there is only one active controller manager.")
	flag.BoolVar(&secureMetrics, "metrics-secure", true,
		"If set, the metrics endpoint is served securely via HTTPS. Use --metrics-secure=false to use HTTP instead.")
	flag.BoolVar(&enableHTTP2, "enable-http2", false,
		"If set, HTTP/2 will be enabled for the metrics and webhook servers")
	flag.IntVar(&logLevel, "v", 2, "operator log verbosity")
	opts := zap.Options{
		Development: true,
	}
	opts.BindFlags(flag.CommandLine)
	flag.Parse()

	logConfig := textlogger.NewConfig(textlogger.Verbosity(logLevel))
	ctrl.SetLogger(textlogger.NewLogger(logConfig))

	// if the enable-http2 flag is false (the default), http/2 should be disabled
	// due to its vulnerabilities. More specifically, disabling http/2 will
	// prevent from being vulnerable to the HTTP/2 Stream Cancellation and
	// Rapid Reset CVEs. For more information see:
	// - https://github.com/advisories/GHSA-qppj-fm5r-hxr3
	// - https://github.com/advisories/GHSA-4374-p667-p6c8
	disableHTTP2 := func(c *tls.Config) {
		setupLog.Info("disabling http/2")
		c.NextProtos = []string{"http/1.1"}
	}

	if !enableHTTP2 {
		tlsOpts = append(tlsOpts, disableHTTP2)
	}

	webhookServer := webhook.NewServer(webhook.Options{
		TLSOpts: tlsOpts,
	})

	// Metrics endpoint is enabled in 'config/default/kustomization.yaml'. The Metrics options configure the server.
	// More info:
	// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.19.0/pkg/metrics/server
	// - https://book.kubebuilder.io/reference/metrics.html
	metricsServerOptions := metricsserver.Options{
		BindAddress:   metricsAddr,
		SecureServing: secureMetrics,
		// TODO(user): TLSOpts is used to allow configuring the TLS config used for the server. If certificates are
		// not provided, self-signed certificates will be generated by default. This option is not recommended for
		// production environments as self-signed certificates do not offer the same level of trust and security
		// as certificates issued by a trusted Certificate Authority (CA). The primary risk is potentially allowing
		// unauthorized access to sensitive metrics data. Consider replacing with CertDir, CertName, and KeyName
		// to provide certificates, ensuring the server communicates using trusted and secure certificates.
		TLSOpts: tlsOpts,
	}

	if secureMetrics {
		// FilterProvider is used to protect the metrics endpoint with authn/authz.
		// These configurations ensure that only authorized users and service accounts
		// can access the metrics endpoint. The RBAC are configured in 'config/rbac/kustomization.yaml'. More info:
		// https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.19.0/pkg/metrics/filters#WithAuthenticationAndAuthorization
		metricsServerOptions.FilterProvider = filters.WithAuthenticationAndAuthorization
	}
	config := ctrl.GetConfigOrDie()

	// Increase QPS and Burst to allow more concurrent API calls
	config.QPS = 50    // Default is usually 5, increase as needed
	config.Burst = 100 // Default is usually 10, increase as needed

	// Add OpenShift SCC scheme
	if err := securityv1.AddToScheme(scheme); err != nil {
		exitOnError(err, "unable to add securityv1 scheme")
	}
	if err := ctrlmgr.AddToScheme(scheme); err != nil {
		exitOnError(err, "unable to add spiffev1alpha1 scheme")
	}

	if err := routev1.AddToScheme(scheme); err != nil {
		exitOnError(err, "unable to add routev1 scheme")
	}

	// Create unified cache builder to prevent race conditions between manager and reconciler caches
	cacheBuilder, err := customClient.NewCacheBuilder()
	exitOnError(err, "unable to create cache builder")

	mgr, err := ctrl.NewManager(config, ctrl.Options{
		Scheme:                 scheme,
		Metrics:                metricsServerOptions,
		WebhookServer:          webhookServer,
		HealthProbeBindAddress: probeAddr,
		LeaderElection:         enableLeaderElection,
		LeaderElectionID:       "24a59323.operator.openshift.io",
		NewCache:               cacheBuilder,
		// LeaderElectionReleaseOnCancel defines if the leader should step down voluntarily
		// when the Manager ends. This requires the binary to immediately end when the
		// Manager is stopped, otherwise, this setting is unsafe. Setting this significantly
		// speeds up voluntary leader transitions as the new leader don't have to wait
		// LeaseDuration time first.
		//
		// In the default scaffold provided, the program ends immediately after
		// the manager stops, so would be fine to enable this option. However,
		// if you are doing or is intended to do any operation such as perform cleanups
		// after the manager stops then its usage might be unsafe.
		// LeaderElectionReleaseOnCancel: true,
	})
	exitOnError(err, "unable to start manager")

	uncachedClient, err := client.New(mgr.GetConfig(), client.Options{Scheme: scheme})
	exitOnError(err, "unable to create uncached client")
	if err = bootstrap.BootstrapCR(context.Background(), uncachedClient, setupLog); err != nil {
		exitOnError(err, "Failed to bootstrap ZeroTrustWorkloadIdentityManager CR")
	}

	staticResourceControllerManager, err := staticResourceController.New(mgr)
	exitOnError(err, "unable to set up static resource controller manager")
	if err = staticResourceControllerManager.SetupWithManager(mgr); err != nil {
		exitOnError(err, "unable to setup static resource controller manager")
	}

	spireServerControllerManager, err := spireServerController.New(mgr)
	exitOnError(err, "unable to set up spire server controller manager")
	if err = spireServerControllerManager.SetupWithManager(mgr); err != nil {
		exitOnError(err, "unable to setup spire server controller manager")
	}

	spireAgentControllerManager, err := spireAgentController.New(mgr)
	if err != nil {
		exitOnError(err, "unable to set up spire agent controller manager")
	}
	if err = spireAgentControllerManager.SetupWithManager(mgr); err != nil {
		exitOnError(err, "unable to setup spire agent controller manager")
	}

	spiffeCsiDriverControllerManager, err := spiffeCsiDriverController.New(mgr)
	if err != nil {
		exitOnError(err, "unable to set up spiffe csi driver controller manager")
	}
	if err = spiffeCsiDriverControllerManager.SetupWithManager(mgr); err != nil {
		exitOnError(err, "unable to setup spiffe csi driver controller manager")
	}

	spireOIDCDiscoveryProviderControllerManager, err := spireOIDCDiscoveryProviderController.New(mgr)
	if err != nil {
		exitOnError(err, "unable to set up spire OIDC discovery provider controller manager")
	}
	if err = spireOIDCDiscoveryProviderControllerManager.SetupWithManager(mgr); err != nil {
		exitOnError(err, "unable to setup spire OIDC discovery provider controller manager")
	}

	if err = mgr.AddHealthzCheck("healthz", healthz.Ping); err != nil {
		exitOnError(err, "unable to set up health check")
	}
	if err = mgr.AddReadyzCheck("readyz", healthz.Ping); err != nil {
		exitOnError(err, "unable to set up ready check")
	}

	// +kubebuilder:scaffold:builder

	setupLog.Info("starting manager")
	err = mgr.Start(ctrl.SetupSignalHandler())
	exitOnError(err, "problem running manager")
}

func exitOnError(err error, logMessage string) {
	if err != nil {
		setupLog.Error(err, logMessage)
		os.Exit(1)
	}
}
